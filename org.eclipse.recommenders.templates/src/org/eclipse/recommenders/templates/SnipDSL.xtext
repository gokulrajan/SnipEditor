grammar org.eclipse.recommenders.templates.SnipDSL with org.eclipse.xtext.xbase.Xbase 
import 'http://www.eclipse.org/xtext/xbase/Xbase' as xbase
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtypes
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate snipDSL "http://www.eclipse.org/recommenders/templates/SnipDSL"

//the top-most element of the grammar. It does not have the best name
//TODO:rename it.
domainmodel:
	importSection=jFaceImportSection?
	entity=entity? 
	//features+=EntityFeature*
    body=dModelBody
	
;
/*Import section used to enable imports of the following format:
 * ${imp:import(imp1, imp2, ..)}
 * TODO: no coma is required between imports! Fix IT!
 */
jFaceImportSection returns xtypes::XImportSection:
	
	'${'('imp'':')?
	'import'
	'(' XImportSection')}'
;
//overridden to support the required syntax
XImportDeclaration returns xtypes::XImportDeclaration:
	','?
	(importedType=[types::JvmDeclaredType|QualifiedName] 
		| importedNamespace=QualifiedNameWithWildcard)
		
;


/*
 * Body for the whole domain model. Enables to treat the domain model as a class
 */
dModelBody returns xbase::XBlockExpression:
{xbase::XBlockExpression}
	(expressions += abstractElement) *
;

//Any element that can be found in the body of the snippet
//Question: Should the helpperClassAnnotation still exist?
abstractElement returns xbase::XExpression:
	packageDeclare | 
	entity|
	helpperClassAnnotation | 
	method |
	XExpressionInsideBlock 
;
//simple package declaration. does not support much template syntax
packageDeclare:
	'package' name = QualifiedName '{'
	(elements += abstractElement)*
	'}'
;

//a class representation. snippets might contain classes as well
entity:
	(visibility=Visibility)? 'class' name = ValidID 
		('extends' jType=abstractTypeName  )?
	'{'
		features += EntityFeature*
	
	'}'
;

//features available in an entity
EntityFeature returns xbase::XExpression:
	jFaceVariableDeclaration ";" | method 

;

//the declaration for a method
//TODO: set the visibility to allow template expression like link
method:
	(visibility=Visibility)? 'static'?  (jType=abstractTypeName | "void")
	name=ValidID'('(params+=FullJvmFormalParameter
		(','params+=FullJvmFormalParameter)*)?')' 
		('throws' throwExceptions+=operandID(',' throwExceptions+=operandID)*)?
	body=XBlockExpression
;
//attribute assignments-> ways in which a variable can be declared
attributeAssignment returns xbase::XExpression:
	 blockAssignment | XLiteral |=>XExpression
;
//assignment with {...}
blockAssignment returns xbase::XExpression:
	{blockAssignment}
	"{" (values+=XLiteral (',' values+=XLiteral)*)? "}"
;


//attribute declaration -> replaced with jFaceVarDeclaration
/*attributeDeclaration :
	(visible=Visibility)? 'static'? (jType=abstractTypeName|jfaceType=jFaceDeclarationType '[]'?)
	name = declarativeID ('=' value=XExpression)? 
;*/

//features that are present in the block
XExpressionInsideBlock  returns xbase::XExpression :
 			(jFaceVariableDeclaration | 
 			 XExpression
 			) ';'?
;
/* A specific variable declaration
 * Changed the name to simpleName as the type computation asked for a simple name
 * Check XVariableDeclaration.getSimpleName();
 */
jFaceVariableDeclaration returns xbase::XVariableDeclaration:
	{jFaceVariableDeclaration}
	(visible=Visibility)? static='static'? ( writeable?='final')? (jType=abstractTypeName) arrayType='[]'?
	simpleName=declarativeID ('=' right=attributeAssignment)?
	
;


//overridden to add template specific extensions to the xbase chain of expressions
XExpression returns xbase::XExpression :
	UnaryOperation
;
 UnaryOperation returns xbase::XExpression:
	{UnaryOperation}
	operand=jFaceExpression feature=UnaryOperand
	|=>jFaceSpecificLiteral
;

/*Append special jFace expression to the grammar
 * this expression will be resolved in the typecomputer to their specific type
 */
  
jFaceExpression returns xbase::XExpression:
	{jFaceExpression}
	
	( '${' (
		value=JFACEEXPRID '}'| 
		ValidID ':' value = ('var' | 'localVar' |'field' ) 
		'(' types+=JvmTypeReference (',' types+=JvmTypeReference)*')}' 
		|ValidID ':' value='link' '('links+=XExpression(','links+=XExpression)*')}'
		|ValidID ':' value='argType' '('arg=IdOrSuper   /*[types::JvmIdentifiableElement|IdOrSuper]*/ ',' typeArg=INT')}'
		)) //=>('.' feature=XExpression)?
	//|=>jFaceSpecificLiteral
	;
/*JFace cast expression : supports casts to jface types + normal java casting
 * (xbase offers only Xtend cast structure : elem as type
 * e.g: (${array_type})elem
 */
jFaceCastExpression returns xbase::XExpression:
	{jFaceCastExpression}
 '('(type=jFaceDeclarationType | javaType=abstractTypeName)')' target=XExpression
 |=> AssignmentWithClosure
;



/*
 *Assignment that changes the XAssignment to support [] closure 
 * for operands. -> Xbase offers lambda expressions instead of closure, so there are some problems regarding this
 * Does not offer scoping for local scope variables (variables inside a method body)
 * TODO: Implement JvmIdentifiableElement as feature!
 * TODO: find a better way to deal with the [] closure
 */
AssignmentWithClosure returns xbase::XExpression:
	{AssignmentWithClosure}
	(feature=FeatureCallID 
	closure=XClosure (OpSingleAssign|OpMultiAssign) value=XAssignment
	) |=>XAssignment
;




/*
 * Note: Writable means final!
 *-> Replaced with jFaceVariableDeclaration 
 
XVariableDeclaration returns xbase::XExpression:
	{xbase::XVariableDeclaration}
	( writeable?='final')? (type=abstractTypeName) name=declarativeID ('=' right=attributeAssignment)?
;

*/

//overridden to include and modify expression as necessary

XPrimaryExpression returns xbase::XExpression:
	ConstructorCall |
	XBlockExpression |
	XSwitchExpression |
	AbstractFeatureCall |
	XLiteral |
	XIfExpression |
	ForLoopExpression |
	XWhileExpression |
	XDoWhileExpression |
	XThrowExpression |
	XReturnExpression |
	XTryCatchFinallyExpression |
	XParenthesizedExpression;


//Constructor calls for jface types and normal constructor call
ConstructorCall returns xbase::XExpression:
	jFaceConstructorCall | XConstructorCall
;

//possible feature calls
AbstractFeatureCall returns xbase::XExpression:
	FeatureCallWithClosure |
	jFaceExpression|
	XFeatureCall
;

/*
 * Feature call that supports [] closure
 * same problem as the assignment
 */
FeatureCallWithClosure:
	feature=XFeatureCall closure=XClosure
;
/*Constructor call for jface types */
jFaceConstructorCall:
	{jFaceConstructorCall}
	'new' (constructor=(jFaceDeclarationType|abstractTypeName))
	(=>'<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	((=>'(' 
		(
		  arguments+=XExpression (',' arguments+=XExpression)*
		)? 
	')') |=> arguments+=XClosure)
	('{'
		arguments+=EntityFeature*
		'}'
	)?
	;

/*
 * overridden to support [] closure. this is required for the same reason as the assignments
 */

XConstructorCall returns xbase::XExpression:
	
	{xbase::XConstructorCall}
	'new' constructor=[types::JvmConstructor|ValidID] 
	(=>'<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	((=>'(' 
		(
		  arguments+=XExpression (',' arguments+=XExpression)*
		)? 
	')') |=> arguments+=XClosure)
	arguments+=XBlockExpression?
	('{'
		arguments+=EntityFeature*
		'}'
	)?
	;
 /*
 * Overridden to eliminate lambda expression 
 * This expressions were conflicting with [] closure, and java has no lambda expressions
 */
XFeatureCall returns xbase::XExpression:
	{xbase::XFeatureCall}
	('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? 
	(feature=[types::JvmIdentifiableElement|IdOrSuper])  
	(=>explicitOperationCall?='(' 
		(
		 	featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
		)? 
	')')?
	;


/**
 * same reason to override as above
 */
XMemberFeatureCall returns xbase::XExpression:
	XPrimaryExpression
	(=>({xbase::XAssignment.assignable=current} ('.'|explicitStatic?="::") (feature=[types::JvmIdentifiableElement|FeatureCallID] )OpSingleAssign) value=XAssignment
	|=>({xbase::XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::")) 
		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
		(feature=[types::JvmIdentifiableElement|FeatureCallID]) (
			=>explicitOperationCall?='(' 
				(
				   	memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
				)? 
			')')?
		)*;



//include the classic for loop expression

ForLoopExpression returns xbase::XExpression:
	ClassicForLoopExpression | XForLoopExpression
;

//used for unary operations

UnaryOperand:
	"!" | "--" | "++";

/*
 * The classic for loop expression
 */
ClassicForLoopExpression:
	//{ClassicForLoopExpression}
	'for' '(' 
	(declaredParam=JvmFormalParameter ('=' value=XAssignment)?)?';' 
				(condition=XExpression)? ';' 
				(forExpression=XExpression)?
		')'
		eachExpression=XExpression
;



XForLoopExpression returns xbase::XExpression:
	{xbase::XForLoopExpression}
	'for' '(' declaredParam=(FullJvmFormalParameter|JvmFormalParameter) ':' forExpression=XExpression ')'
		eachExpression=XExpression
;
//overridden to support separation of expressions; 
//e.g: the else expression can appear without the if expression
XIfExpression returns xbase::XExpression:
	{xbase::XIfExpression}
	'if' '(' if=XExpression ')'
	then=XExpression
	(=>'else' else=XExpression)?
	|{xbase::XIfExpression}
	=>'else' else=XExpression;

/*
 * same as for the if expression
 */
XTryCatchFinallyExpression returns xbase::XExpression:
	{xbase::XTryCatchFinallyExpression}
	'try' 
		expression=XExpression
	(
		catchClauses+=XCatchClause+
		(=>'finally' finallyExpression=XExpression)?
	|	'finally' finallyExpression=XExpression
	)
	|{xbase::XTryCatchFinallyExpression}
	(
		catchClauses+=XCatchClause+
		(=>'finally' finallyExpression=XExpression)?
	|	'finally' finallyExpression=XExpression
	)
	;

//visibility for methods, attributes, classes
enum Visibility :
	 protected | public | private
;

//template type syntax
 typeID returns types::JvmTypeReference:
 		
 		('${'ValidID':'('elemType' | 'newType')'('=>(JvmTypeReference)')}')
 		//|(=>'${''elemType' '('=>JvmTypeReference')}')
 ;

//id used to declare variables
declarativeID:
	  jFaceVarID |
	  =>ValidID 
;
//template variable declaration syntax 
jFaceVarID:
	'${'(ValidID|JFACEEXPRID)'}' 
		|('${'=>ValidID ':' ('newName') '('(QualifiedName|JFACEEXPRID)')}')
 		//|('${'=>('freeName'|'newName') '('ValidID')}')
;
//ID's that can be used in operations (e.g. for feature calls through identifiable elements)
operandID :
	ValidID | 
	('${' =>(ValidID)'}')

;





//jFace specific elements -> this are reserved words!
jFaceSpecificLiteral returns xbase::XExpression:
	{jFaceSpecificLiteral}
	'${'type=('cursor'|'dollar'|'line_selection'|'date'
		|'time'|'enclosing_method'|'enclosing_method_arguments'|
		'enclosing_package'|'enclosing_project'|
		'file'|'user' |'year'|'primary_type_name'|'return_type'|'enclosing_type'
	)'}' |{jFaceSpecificLiteral} '${' type='word_selection' '}${}'
	|=>jFaceCastExpression
;

//abstract type syntaxes. used to include the ${array_type} syntax as a possible declaration type
//without using a JvmTypeReference
 abstractTypeName:
 	type=referencedType | jFaceType=jFaceDeclarationType
 ;
 
 /*
  * JFace specific type declarations
  * This types are hard to be referenced by a JvmTypeReference, so their types are computed
  * separately in the type computer.
  */
 jFaceDeclarationType:
	'${'type=('array_type'|'iterable_type'|ValidID )'}'
	|('${'ValidID':'('elemType' | 'newType')'('type=( JFACEEXPRASTYPE | 'array_type'|'iterable_type' )')}')
;
 

/* 
 *Type declarations that support a JvmTypeReference 
 */
referencedType returns types::JvmTypeReference:
	(typeID)
	|=>	JvmTypeReference
;

FeatureCallID:
	operandID | 'extends' | 'static' | 'import' | 'extension'
;

JvmFormalParameter returns types::JvmFormalParameter:
{JvmFormalParameter}	
(parameterType=referencedType | jFaceType=jFaceDeclarationType)? 
(simpleName=operandID | jFaceExpr=jFaceExpression);
	
FullJvmFormalParameter returns types::JvmFormalParameter:
{JvmFormalParameter}	
	(parameterType=referencedType | jFaceType=jFaceDeclarationType) simpleName=(declarativeID|operandID) ;


helpperClassAnnotation :
	'${' 'helper' '}' 
	class= entity 
	'${' 'endHelper' '}'
;
XLiteral returns xbase::XExpression:
	XBooleanLiteral |
	XNumberLiteral |
	XNullLiteral |
	XStringLiteral
;

//template expressions
JFACEEXPRID:
	JFACEEXPRASTYPE | 'iterable_element' | 'array_element' | 'index' | 'exception_variable_name'
;

//template expressions that can be used to refer a type
JFACEEXPRASTYPE:
	
	'array' | 'collection' | /*'iterator' |*/ 'iterable' 
;

terminal ID:
	'^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	
ArrayBrackets :
	'[]'
;
 