grammar org.eclipse.recommenders.snipeditor.SnipDSL with org.eclipse.xtext.xbase.Xbase
import 'http://www.eclipse.org/xtext/xbase/Xbase' as xbase
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

generate snipDSL "http://www.eclipse.org/recommenders/snipeditor/SnipDSL"

domainmodel:
	(importSection+=importDeclare)*
	=> (elements += abstractElement )+
;
importDeclare:
	'${import('name = (QualifiedNameWithWildcard | QualifiedName) ')}'
;


abstractElement returns xbase::XExpression:
	packageDeclare | entity | feature | blockFeature | helpperClassAnnotation
;

packageDeclare:
	'package' name = QualifiedName '{'
	(elements += abstractElement)*
	'}'
;


entity:
	(visibility=Visibility)? 'class' name = ValidID 
		('extends' jType=abstractTypeName  )?
	'{'
		features += feature*
	
	'}'
;

feature returns xbase::XExpression:
	attributeDeclaration | method 

;


parameter :
	(jType=abstractTypeName)  name = declarativeID;


method:
	(visibility=Visibility)? 'static'?  (jType=abstractTypeName | "void")
	name=ValidID'('(params+=parameter
		(','params+=parameter)*)?')'
	body=myBlockExpression
;

attributeAssignment returns xbase::XExpression:
	 arrayAssignment | blockAssignment | XConstructorCall | binaryOperation
;

blockAssignment:
	{blockAssignment}
	"{" (values+=literal (',' values+=literal)*)? "}"
;

arrayAssignment:
	{arrayAssignment}
	"new" (jType=abstractTypeName) arguments=squareClosure
;


binaryOperation:
	'('?
	operands+= (featureCall | literal) ')'?
		(binaryOperator opertions+=binaryOperation)*
	
;

attributeDeclaration :
	(visible=Visibility)? 'static'? jType=abstractTypeName
	name = declarativeID ('=' value=attributeAssignment)? ";"
;


myBlockExpression returns xbase::XExpression:
	{myBlockExpression}
	'{'
		((expressions+=blockFeature))* 
		
	'}'
;

blockFeature returns xbase::XExpression:
 			(operandWithDeclaration ';' |  abstractOperation ';' | XPrimaryExpression ';'?
 				|  featureCall ';'
 			)
;

abstractOperation:
	operandAssignment | unaryOperation
;

operandAssignment:
	result=simpleOperand valueAssignmentOperator
		value=binaryOperation
;


unaryOperation:
	result=simpleOperand
		operator=unaryOperator
	;

conditionalExpression:
	operands+=(simpleOperand | literal ) (conditionOperator operands+=( featureCall | literal ))?
	(('&&' | '||')expressions+=conditionalExpression)*
;




operandWithDeclaration returns operand:
	(jType=abstractTypeName)
	name=declarativeID ('=' value = attributeAssignment)?
;


calledParameter returns xbase::XExpression:
	
	(localMethodCall | simpleOperand | XConstructorCall) (arguments+=squareClosure)?
;

featureCall returns operand:
	caller=calledParameter
	(('.' featureCalls+=featureCall)*)
;

localMethodCall:
	name = operandID '('
	(parameters+=(featureCall | literal) (',' parameters+=(featureCall | literal))*)?
	')' 
;
simpleOperand returns operand:
	name = operandID
;

unaryOperator:
	"++" | "--"
;

binaryOperator:
	"+" | "-" | "*" | "/" 
;

conditionOperator:
	'==' | '!=' | '>=' | '<=' | '>' | '<'
	;
valueAssignmentOperator:
	"="|"+="|"-="
;


XIfExpression returns XExpression:
	{XIfExpression}
	'if' '(' if=conditionalExpression ')'
	then=myBlockExpression
	(=>'else' else=myBlockExpression)?;

XSwitchExpression returns XExpression:
	{XSwitchExpression}
	'switch' (=>(localVarName=typeID ':')? switch=featureCall
		| =>('(' localVarName=typeID ':') switch=featureCall ')') '{'
	(cases+=XCasePart)+
	('default' ':' default=myBlockExpression )?
	'}';

XCasePart:
	typeGuard=JvmTypeReference? ('case' case=XExpression)? 
		':' then=myBlockExpression 
		;
 
XForLoopExpression returns XExpression:
	
	classicForLoop | forLoopWithIterator
	;

classicForLoop:
	
	'for' '(' declaredParam=(operandWithDeclaration | simpleOperand) ';' 
				forExpression=conditionalExpression ';'
				forOperation=abstractOperation ')'
		body=myBlockExpression
;

forLoopWithIterator:
	'for''('
		jType=(abstractTypeName) iteratorName=declarativeID ':'
		iteratableObject=featureCall
		
	')'
	body=myBlockExpression
;



XWhileExpression returns XExpression:
	{XWhileExpression}
	'while' '(' predicate=conditionalExpression ')'
		body=myBlockExpression;
	
XDoWhileExpression returns XExpression:
	{XDoWhileExpression}
   'do'
       body=myBlockExpression
   'while' '(' predicate=conditionalExpression ')';

XConstructorCall returns XExpression:
	{XConstructorCall}
	'new' constructor=[types::JvmConstructor|abstractTypeName] 
	(=>'<' typeArguments+=abstractTypeName (',' typeArguments+=abstractTypeName)* '>')?
	(=>'(' 
		(
		    arguments+=(featureCall | literal)
		    (',' arguments+=(featureCall | literal))*
		)? 
	')')?
	arguments+=squareClosure?;

enum Visibility :
	 protected | public | private
;

 typeID:
 		'${'ValidID '}'|
 		'${elemType(' ValidID ')}'
 	
 ;

declarativeID:
	 ValidID | jFaceVarID 
;

jFaceVarID:
		'${'ValidID (':' ('freeName('ValidID')' | 'iter'))? '}'
		|'${freeName('ValidID')}'
;
operandID:
	'${'ValidID'}' | ValidID
;


literal:
	value= (STRING | Number | booleanLiteral)
;
booleanLiteral:
	'true' | 'false' | 'null'
;

abstractTypeName :
	(typeID|ValidID) '[]'?
;

/* 
annotation :
	
	'${cursor}' | '${dollar}'
		
;*/
helpperClassAnnotation:
	'${helper}' class= entity '${endHelper}'
;

squareClosure:
	'[' (featureCall | literal) ']'
;

 
 