grammar org.eclipse.recommenders.snipeditor.SnipDSL with org.eclipse.xtext.xbase.Xbase
import "http://www.eclipse.org/xtext/xbase/Xtype"
import 'http://www.eclipse.org/xtext/xbase/Xbase' as xbase
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

generate snipDSL "http://www.eclipse.org/recommenders/snipeditor/SnipDSL"

domainmodel:
	importSection=XImportSection?
    (elements += abstractElement )*
;
XImportDeclaration :
	'${''import''('
	(
	importedType=[types::JvmDeclaredType|QualifiedName] 
		| importedNamespace=QualifiedNameWithWildcard
	)
	')}'
;


abstractElement returns xbase::XExpression:
	packageDeclare | 
	entity | 
	feature | 
	helpperClassAnnotation | 
	abstractAssignmentOperation ";" | 
	XPrimaryExpression ";"?|
	jFaceSpecificLiteral
;

packageDeclare:
	'package' name = QualifiedName '{'
	(elements += abstractElement)*
	'}'
;


entity:
	(visibility=Visibility)? 'class' name = ValidID 
		('extends' jType=abstractTypeName  )?
	'{'
		features += feature*
	
	'}'
;

feature returns xbase::XExpression:
	attributeDeclaration ";" | method 

;


parameter :
	(jType=abstractTypeName)  name = declarativeID;


method:
	(visibility=Visibility)? 'static'?  (jType=abstractTypeName | "void")
	name=ValidID'('(params+=parameter
		(','params+=parameter)*)?')' 
		('throws' throwExceptions+=simpleOperand(',' throwExceptions+=simpleOperand)*)?
	body=myBlockExpression
;
//attribute assignments
attributeAssignment returns xbase::XExpression:
	 arrayAssignment | blockAssignment | XConstructorCall | multyAssignOperation
;
//assignment with {...}
blockAssignment:
	{blockAssignment}
	"{" (values+=literal (',' values+=literal)*)? "}"
;
//square bracket assignment
arrayAssignment:
	{arrayAssignment}
	"new" (jType=abstractTypeName) arguments=squareClosure
;



//attribute declaration
attributeDeclaration :
	(visible=Visibility)? 'static'? (jType=abstractTypeName)
	name = declarativeID ('=' value=attributeAssignment)? 
;

//expression of the block
myBlockExpression returns xbase::XExpression:
	{myBlockExpression}
	'{'
		((expressions+=blockFeature))* 
		
	'}'
;
//features that are present in the block
blockFeature  returns xbase::XExpression :
 			(XVariableDeclaration ';' | 
 			 abstractAssignmentOperation ';' | 
 			 XPrimaryExpression ';'?|
			 jFaceSpecificLiteral
 			)
;

abstractAssignmentOperation:
	operandAssignment | unaryOperation
;

operandAssignment:
	result=simpleOperand valueAssignmentOperator
		value=multyAssignOperation
;
//does not support ()
multyAssignOperation :

	operands+= (XFeatureCall | literal | XParenthesizedExpression) 
		(binaryOperator operands+=multyAssignOperation)*
	
;
unaryOperation:
	result=XFeatureCall
		operator=unaryOperator
	;

//removed =>, see what happens
conditionalExpression:
	
	('('operands+=operandAssignment')' 
		conditionOperator operands+=multyAssignOperation
	| operands+=multyAssignOperation
	 	(conditionOperator operands+=multyAssignOperation)?)
	
	(('&&' | '||')expressions+=conditionalExpression)*
;




XVariableDeclaration:
	jType=abstractTypeName
	name=declarativeID ('=' value = attributeAssignment)?
;
converssionCall:
	'('newJType=abstractTypeName')'name=XFeatureCall
	(arguments+=squareClosure)?
;

calledParameter returns xbase::XExpression:
	
	(localMethodCall | simpleOperand | XConstructorCall | converssionCall) 
;

XFeatureCall returns XExpression:
	featureCalls+=calledParameter
	(('.' featureCalls+=calledParameter)*) 
	
;


//this is the call for a method; has multyAssignOp as parameter as it includes all.
localMethodCall:
	name = operandID '('
	(parameters+=multyAssignOperation (',' parameters+=multyAssignOperation)*)?
	')' (arguments+=squareClosure)?
;
simpleOperand:
	name = (operandID) 	
	(arguments+=squareClosure)?
;

unaryOperator:
	"++" | "--"
;

binaryOperator:
	"+" | "-" | "*" | "/" 
;

conditionOperator:
	'==' | '!=' | '>=' | '<=' | '>' | '<' | 'instanceof'
	;
valueAssignmentOperator:
	"="|"+="|"-="
;


XIfExpression returns XExpression:
	{XIfExpression}
	'if' '(' if=conditionalExpression ')'
	then=myBlockExpression
	(=>'else' else=myBlockExpression)?;

XSwitchExpression returns XExpression:
	{XSwitchExpression}
	'switch' (=>(localVarName=typeID ':')? switch=XFeatureCall
		| =>('(' localVarName=typeID ':') switch=XFeatureCall ')') '{'
	(cases+=XCasePart 'break;')+
	('default' ':' defaultExp+=blockFeature* 'break;')?
	'}';

XCasePart:
	typeGuard=JvmTypeReference? ('case' case=XExpression)? 
		':' thenExp+=blockFeature
		 
		;
 
XForLoopExpression returns XExpression:
	
	classicForLoop | forLoopWithIterator
	;

classicForLoop:
	
	'for' '(' declaredParam=(XVariableDeclaration | simpleOperand) ';' 
				forExpression=conditionalExpression ';'
				forOperation=abstractAssignmentOperation ')'
		body=myBlockExpression
;

forLoopWithIterator:
	'for''('
		jType=(abstractTypeName) iteratorName=declarativeID ':'
		iteratableObject=XFeatureCall
		
	')'
	body=myBlockExpression
;



XWhileExpression returns XExpression:
	{XWhileExpression}
	'while' '(' predicate=conditionalExpression ')'
		body=myBlockExpression;
	
XDoWhileExpression returns XExpression:
	{XDoWhileExpression}
   'do'
       body=myBlockExpression
   'while' '(' predicate=conditionalExpression ')';


//TODO: replace ValidID to support abstract type creation
XConstructorCall returns XExpression:
	{XConstructorCall}
	'new' constructor=abstractTypeName 
	(=>'<' typeArguments+=abstractTypeName (',' typeArguments+=abstractTypeName)* '>')?
	(=>'(' 
		(
		    arguments+=(multyAssignOperation)
		    (',' arguments+=(multyAssignOperation))*
		)? 
	')')?
	arguments+=squareClosure?;

XThrowExpression returns XExpression :
	{XThrowExpression} 'throw' expression=(simpleOperand|XConstructorCall);
	
XReturnExpression returns XExpression :
	{XReturnExpression} 'return' (=>expression=multyAssignOperation);
	
XTryCatchFinallyExpression returns XExpression:
	{XTryCatchFinallyExpression}
	'try' 
		expression=myBlockExpression
	(
		catchClauses+=XCatchClause+
		(=>'finally' finallyExpression=myBlockExpression)?
	|	'finally' finallyExpression=myBlockExpression
	);
	
XCatchClause :
	=>'catch' '(' param=parameter ')' expression=myBlockExpression;

XParenthesizedExpression returns XExpression:
	'(' multyAssignOperation ')';




enum Visibility :
	 protected | public | private
;

//TODO: put abstract type in elemType!
 typeID:
 	{typeID}
 		('${'ValidID 
			(=>':''elemType' '('type=JvmTypeReference')}' | '}'))
 		|(=>'${''elemType' '('type=JvmTypeReference')}')
 ;

declarativeID:
	 ValidID | jFaceVarID 
;

jFaceVarID :
	('${'ValidID 
		(=>':' ('freeName' '('ValidID')}' | 'iter''}' | 'newName' '('ValidID')}')))
	|(=>'${''freeName' '('ValidID')}') 
	|=> '${'ValidID'}'
;
operandID :
	 
	ValidID | 
	 ('${' ValidID ':''var''}') 
	 |=>'${'ValidID'}'
;


literal:
	value= (STRING | Number | booleanLiteral  )
;
booleanLiteral:
	'true' | 'false' | 'null'
;

jFaceSpecificLiteral:
	'${'type=('cursor'|'dollar'|'line_selection')'}'
;

abstractTypeName :
	(typeID) '[]'? 
	|=>	type=JvmTypeReference '[]'?
;



/* 
annotation :
	
	'${cursor}' | '${dollar}'
		
;*/
helpperClassAnnotation :
	'${' 'helper' '}' 
	class= entity 
	'${' 'endHelper' '}'
;

squareClosure:
	'[' multyAssignOperation ']'
;
 