grammar org.eclipse.recommenders.snipeditor.SnipDSL with org.eclipse.xtext.xbase.Xbase
import 'http://www.eclipse.org/xtext/xbase/Xbase' as xbase
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

generate snipDSL "http://www.eclipse.org/recommenders/snipeditor/SnipDSL"

domainmodel:
	(importSection+=importDeclare)*
    (elements += abstractElement )*
;
importDeclare hidden (WS):
	'${''import''('name = (QualifiedNameWithWildcard | QualifiedName) ')}'
;


abstractElement returns xbase::XExpression:
	packageDeclare | entity | feature | blockFeature | helpperClassAnnotation
;

packageDeclare:
	'package' name = QualifiedName '{'
	(elements += abstractElement)*
	'}'
;


entity:
	(visibility=Visibility)? 'class' name = ValidID 
		('extends' jType=abstractTypeName  )?
	'{'
		features += feature*
	
	'}'
;

feature returns xbase::XExpression:
	attributeDeclaration | method 

;


parameter :
	(jType=abstractTypeName)  name = declarativeID;


method:
	(visibility=Visibility)? 'static'?  (jType=abstractTypeName| "void")
	name=ValidID'('(params+=parameter
		(','params+=parameter)*)?')'
	body=myBlockExpression
;
//attribute assignments
attributeAssignment returns xbase::XExpression:
	 arrayAssignment | blockAssignment | XConstructorCall | multyAssignOperation
;
//assignment with {...}
blockAssignment:
	{blockAssignment}
	"{" (values+=literal (',' values+=literal)*)? "}"
;
//square bracket assignment
arrayAssignment:
	{arrayAssignment}
	"new" (jType=abstractTypeName) arguments=squareClosure
;



//attribute declaration
attributeDeclaration :
	(visible=Visibility)? 'static'? jType=abstractTypeName
	name = declarativeID ('=' value=attributeAssignment)? ";"
;

//expression of the block
myBlockExpression returns xbase::XExpression:
	{myBlockExpression}
	'{'
		((expressions+=blockFeature))* 
		
	'}'
;
//features that are present in the block
blockFeature returns xbase::XExpression:
 			(operandWithDeclaration ';' |  abstractAssignmentOperation ';' | XPrimaryExpression ';'?
 			)
;

abstractAssignmentOperation:
	operandAssignment | unaryOperation
;

operandAssignment:
	result=simpleOperand valueAssignmentOperator
		value=multyAssignOperation
;
//does not support ()
multyAssignOperation:

	operands+= (XFeatureCall | literal) 
		(binaryOperator operands+=multyAssignOperation)*
	
;
unaryOperation:
	result=XFeatureCall
		operator=unaryOperator
	;

//removed =>, see what happens
conditionalExpression:
	
	('('operands+=operandAssignment')' 
		conditionOperator operands+=multyAssignOperation
	| operands+=multyAssignOperation
	 	(conditionOperator operands+=multyAssignOperation)?)
	
	(('&&' | '||')expressions+=conditionalExpression)*
;




operandWithDeclaration :
	(jType=abstractTypeName)
	name=declarativeID ('=' value = attributeAssignment)?
;


calledParameter returns xbase::XExpression:
	
	(localMethodCall | simpleOperand | XConstructorCall ) (arguments+=squareClosure)?
;

XFeatureCall returns XExpression:
	featureCalls+=calledParameter
	(('.' featureCalls+=calledParameter)*)
;


//this is the call for a method; has multyAssignOp as parameter as it includes all.
localMethodCall:
	name = operandID '('
	(parameters+=multyAssignOperation (',' parameters+=multyAssignOperation)*)?
	')' 
;
simpleOperand:
	name = operandID
;

unaryOperator:
	"++" | "--"
;

binaryOperator:
	"+" | "-" | "*" | "/" 
;

conditionOperator:
	'==' | '!=' | '>=' | '<=' | '>' | '<'
	;
valueAssignmentOperator:
	"="|"+="|"-="
;


XIfExpression returns XExpression:
	{XIfExpression}
	'if' '(' if=conditionalExpression ')'
	then=myBlockExpression
	(=>'else' else=myBlockExpression)?;

XSwitchExpression returns XExpression:
	{XSwitchExpression}
	'switch' (=>(localVarName=typeID ':')? switch=XFeatureCall
		| =>('(' localVarName=typeID ':') switch=XFeatureCall ')') '{'
	(cases+=XCasePart 'break;')+
	('default' ':' defaultExp+=blockFeature* 'break;')?
	'}';

XCasePart:
	typeGuard=JvmTypeReference? ('case' case=XExpression)? 
		':' thenExp+=blockFeature
		 
		;
 
XForLoopExpression returns XExpression:
	
	classicForLoop | forLoopWithIterator
	;

classicForLoop:
	
	'for' '(' declaredParam=(operandWithDeclaration | simpleOperand) ';' 
				forExpression=conditionalExpression ';'
				forOperation=abstractAssignmentOperation ')'
		body=myBlockExpression
;

forLoopWithIterator:
	'for''('
		jType=(abstractTypeName) iteratorName=declarativeID ':'
		iteratableObject=XFeatureCall
		
	')'
	body=myBlockExpression
;



XWhileExpression returns XExpression:
	{XWhileExpression}
	'while' '(' predicate=conditionalExpression ')'
		body=myBlockExpression;
	
XDoWhileExpression returns XExpression:
	{XDoWhileExpression}
   'do'
       body=myBlockExpression
   'while' '(' predicate=conditionalExpression ')';

XConstructorCall returns XExpression:
	{XConstructorCall}
	'new' constructor=[types::JvmConstructor|abstractTypeName] 
	(=>'<' typeArguments+=abstractTypeName (',' typeArguments+=abstractTypeName)* '>')?
	(=>'(' 
		(
		    arguments+=(multyAssignOperation)
		    (',' arguments+=(multyAssignOperation))*
		)? 
	')')?
	arguments+=squareClosure?;

enum Visibility :
	 protected | public | private
;

 typeID hidden(WS):
 		'${'(
 			ValidID |
 		'elemType(' ValidID ')'
 		)'}'
 ;

declarativeID:
	 ValidID | jFaceVarID 
;

jFaceVarID hidden (WS):
		'${'(
			ValidID (':' ('freeName' '('ValidID')' | 'iter'))? |'freeName' '('ValidID')'
		) '}'
;
operandID :
	 ValidID | '${'ValidID'}'
;


literal:
	value= (STRING | Number | booleanLiteral)
;
booleanLiteral:
	'true' | 'false' | 'null'
;

abstractTypeName :
	(typeID|ValidID) '[]'?
;

/* 
annotation :
	
	'${cursor}' | '${dollar}'
		
;*/
helpperClassAnnotation hidden (WS):
	'${''helper''}' class= entity '${''endHelper''}'
;

squareClosure:
	'[' multyAssignOperation ']'
;
 